  function delay(time) {
    return new Promise(r => setTimeout(r, time));
  }

  function getSavedData() {
    const data = localStorage.getItem("QuizletSaved") || localStorage.getItem("translator_object") || "{}";
    console.log("loaded-data");
    return JSON.parse(data);
  }

  const data = getSavedData();

  function getData() {
    const elements = Array.from(document.querySelectorAll("span.TermText.notranslate"));
    for (let i = 0; i < elements.length - 1; i+=2) {
      const lastElement = elements[i];
      const nextElement = elements[i + 1];

      data[lastElement.innerText.trim()] = nextElement.innerText.trim();
      data[nextElement.innerText.trim()] = lastElement.innerText.trim();
    }
    localStorage.setItem("QuizletSaved", JSON.stringify(data));
    alert("got data");
  }

  function translate(requested) {
    return (data.hasOwnProperty(requested.trim()) && data[requested.trim()]) || null;
  }

  async function complete(iterations) {
    const translateElement = document.querySelector(".FormattedText.notranslate");
    const continueButton = document.querySelector('button[type="button"][aria-label="Continue"]');
    if (continueButton) {
      continueButton.click();
      await delay(2000);
      return
    };

    const translation = translate(translateElement.innerText);

    if (translation) {
      const writeElement = document.querySelector(".AutoExpandTextarea-textarea, .AssemblyInput-input.AssemblyInput-placeholder");
      const nextButton = document.querySelector('button[type="submit"]');

      translateElement.dispatchEvent(new MouseEvent("click", { bubbles: true, cancelable: true }));

      if (writeElement) {
        writeElement.focus();
        await delay(100);
        document.execCommand("insertText", false, translation);
        await delay(100);
        nextButton.click();
        await delay(1200);
        return;
      } else {
        const potentialAnswerElements = Array.from(document.querySelectorAll(".FormattedText.notranslate"));
        let answerElement;
        for (let i = 1; i < potentialAnswerElements.length; i++) {
          answerElement = potentialAnswerElements[i];
          if (answerElement.innerText.trim() == translation) {
            break;
          }
        }
        if (answerElement) {
          answerElement.dispatchEvent(new MouseEvent("click", { bubbles: true, cancelable: true }));
          await delay(2400);
        } else {
          return
        }
      }
    } else {
      return
    }
  }

  function createGui() {
    const div = document.createElement("div");
    div.style = "z-index: 9999; top: 0%; left: 0%; height: 24px; width: 100%; position: fixed; background-color: black;";

    const input = document.createElement("input");
    input.style.width = "200px";
    input.placeholder = "iterations/translate";
    div.appendChild(input);

    let label;

    function createButton(text, cb) {
      const button = document.createElement("button");
      button.textContent = text;
      button.addEventListener("click", cb);
      div.appendChild(button);
    }

    function translateShow() {
      const translation = translate(input.value);
      if (translation) {
        label.textContent = translation;
      } else {
        label.textContent = "___";
      }
    }

    let going = true;
    const stopcompleting = () => { going = false; };

    const completeButton = createButton("complete", async () => {
      const amt = 99;
      going = true;
      for (let i = 0; i < amt; i++) {
        if (!going) {
          break;
        }
        await complete();
      }
    });
    const stopButton = createButton("stop", stopcompleting);

    const getDataButton = createButton("get", getData);
    const closeButton = createButton("[X]", () => {div.remove()});

    label = document.createElement("label");
    label.textContent = "___";
    div.appendChild(label);

    input.addEventListener("input", translateShow);

    document.body.appendChild(div);
  }

  createGui();
